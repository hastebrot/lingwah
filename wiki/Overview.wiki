#summary A quick overview of Linwah's , features, and usage.

= Why Lingwah? =

Lingwah is a tool for creating [http://en.wikipedia.org/wiki/Parsing parsers].
There are many such tools currently available, most of them emphasize parser 
performance over ease of development.  Most importantly, almost all available 
parsing tools require the developer to refactor their grammar to remove 
[http://en.wikipedia.org/wiki/Left_recursion left recursion].
This can be a significant burden when developing a non-trivial grammar. 
Lingwah was developed with an emphasis on ease of use over performance and is 
built to parse context-free grammars without requiring the grammars to be refactored.

Now, just because Lingwah purposely takes an approach that is known to not be 
the most performant does not mean that Lingwah is slow, Lingwah is 'fast enough'.
Lingwah uses sophisticated memoization and backtracking techniques to accomplish 
it's goals.  The techniques used by Linqwah have been around for decades but 
have not been favored for performance reasons.  
Lingwah uses the memoization and 'continuation-passing' techniques first described 
in the paper [http://arxiv.org/PS_cache/cmp-lg/pdf/9504/9504016v1.pdf "Memoization in Top-Down Parsing"] by Mark Johnson.
However, computers are now many magnitudes of order faster than they were when 
the LR parser was invented by Donald Knuth, and the amount of memory available has also increased 
proportionately.  
It's time to increase our productivity by trading some parsing speed for some 
convenience.

Besides providing a significant advantage of convenience over other parser combinator tools, 
Lingwah also provides the advantages of parser combinators over of 'old-school' parser generators (like ANTLR):

  * No special, non-java grammar syntax in separate project files (i.e. an external DSL)  
  * Built-in IDE support for grammars (ie syntax highlighting, validation, refactoring, code navigation, etc.)
  * No special build steps required
  * No “untouchable”, generated java source files in your project which need to be kept in sync with the grammar specification.
  * Does not complicate the parsing process by dividing it into in lexing (token generation) and token parsing phases

= Features =

= Usage =

